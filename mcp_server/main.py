# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:46:11+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

from models import (
    Alt,
    FieldXgafv,
    GoogleProtobufEmpty,
    GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequest,
    GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse,
    GoogleSecuritySafebrowsingV4FindFullHashesRequest,
    GoogleSecuritySafebrowsingV4FindFullHashesResponse,
    GoogleSecuritySafebrowsingV4FindThreatMatchesRequest,
    GoogleSecuritySafebrowsingV4FindThreatMatchesResponse,
    GoogleSecuritySafebrowsingV4ListThreatListsResponse,
    GoogleSecuritySafebrowsingV4ThreatHit,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com', 'x-twitter': 'youtube'},
    description='Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Safe Browsing API',
    version='v4',
    servers=[{'url': 'https://safebrowsing.googleapis.com/'}],
)


@app.get(
    '/v4/encodedFullHashes/{encodedRequest}',
    tags=[
        'safebrowsing_hash_operations',
        'safebrowsing_threat_management',
        'safebrowsing_threat_lists',
    ],
)
def safebrowsing_encoded_full_hashes_get(
    encoded_request: str = Path(..., alias='encodedRequest'),
    client_id: Optional[str] = Query(None, alias='clientId'),
    client_version: Optional[str] = Query(None, alias='clientVersion'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/encodedUpdates/{encodedRequest}',
    tags=['safebrowsing_threat_management', 'safebrowsing_threat_lists'],
)
def safebrowsing_encoded_updates_get(
    encoded_request: str = Path(..., alias='encodedRequest'),
    client_id: Optional[str] = Query(None, alias='clientId'),
    client_version: Optional[str] = Query(None, alias='clientVersion'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v4/fullHashes:find',
    description=""" Finds the full hashes that match the requested hash prefixes. """,
    tags=[
        'safebrowsing_hash_operations',
        'safebrowsing_threat_management',
        'safebrowsing_threat_lists',
    ],
)
def safebrowsing_full_hashes_find(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: GoogleSecuritySafebrowsingV4FindFullHashesRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v4/threatHits',
    description=""" Reports a Safe Browsing threat list hit to Google. Only projects with TRUSTED_REPORTER visibility can use this method. """,
    tags=['safebrowsing_threat_management'],
)
def safebrowsing_threat_hits_create(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: GoogleSecuritySafebrowsingV4ThreatHit = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v4/threatListUpdates:fetch',
    description=""" Fetches the most recent threat list updates. A client can request updates for multiple lists at once. """,
    tags=['safebrowsing_threat_management', 'safebrowsing_threat_lists'],
)
def safebrowsing_threat_list_updates_fetch(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v4/threatLists',
    description=""" Lists the Safe Browsing threat lists available for download. """,
    tags=['safebrowsing_threat_management', 'safebrowsing_threat_lists'],
)
def safebrowsing_threat_lists_list(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v4/threatMatches:find',
    description=""" Finds the threat entries that match the Safe Browsing lists. """,
    tags=['safebrowsing_threat_management'],
)
def safebrowsing_threat_matches_find(
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: GoogleSecuritySafebrowsingV4FindThreatMatchesRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
